{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","setId","useState","query","setQuery","selectedOption","setSelectedOption","filteredTodos","useMemo","filter","todo","title","toLowerCase","includes","completed","className","type","value","onChange","event","target","defaultValue","selected","map","checked","readOnly","onClick","userId","id","getData","url","fetch","then","response","json","CurrentUser","onClear","selectedUser","setSelectedUser","useEffect","data","name","email","phone","App","setTodos","selectedUserId","setSelectedUserId","ReactDOM","render","document","getElementById"],"mappings":"mSASaA,EAA4B,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MACjD,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4CF,mBAAS,IAArD,mBAAOG,EAAP,KAAuBC,EAAvB,KAEMC,EAAgBC,mBAAQ,kBAC5BR,EAAMS,QAAO,SAAAC,GACX,OAAOA,EAAKC,MAAMC,cAAcC,SAASV,EAAMS,kBAE9CH,QAAO,SAAAC,GACN,OAAQL,GACN,IAAK,MAML,QACE,OAAOK,EALT,IAAK,SACH,OAAQA,EAAKI,UACf,IAAK,YACH,OAAOJ,EAAKI,gBAKnB,CAACX,EAAOH,EAAOK,IAElB,OACE,sBAAKU,UAAU,WAAf,UACE,wCAEA,uBACEC,KAAK,OACLC,MAAOd,EACPe,SAAU,SAACC,GAAD,OAAWf,EAASe,EAAMC,OAAOH,UAE7C,yBACEI,aAAchB,EACda,SAAU,SAACC,GAAD,OAAWb,EAAkBa,EAAMC,OAAOH,QAFtD,UAIE,wBAAQK,UAAQ,EAACL,MAAM,MAAvB,iBACA,wBAAQA,MAAM,SAAd,oBAGA,wBAAQA,MAAM,YAAd,0BAGF,qBAAKF,UAAU,2BAAf,SACE,oBAAIA,UAAU,iBAAd,SACGR,EAAcgB,KAAI,SAAAb,GAAI,OACrB,qBAEEK,UAAS,wCAEPL,EAAKI,UACL,0BACA,6BANJ,UASE,kCACE,uBACEE,KAAK,WACLQ,QAASd,EAAKI,UACdW,UAAQ,IAEV,4BAAIf,EAAKC,WAGX,yBACEI,UAAU,iEAKVC,KAAK,SACLU,QAAS,WACPzB,EAAMS,EAAKiB,SARf,qBAYGjB,EAAKiB,YA7BHjB,EAAKkB,eCnDxB,SAASC,EAAQC,GACf,OAAOC,MAAM,GAAD,OAHG,qCAGH,OAAeD,IACxBE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,U,UCIlBC,EAA+B,SAAC,GAAyB,IAAvBR,EAAsB,EAAtBA,OAAQS,EAAc,EAAdA,QACrD,EAAwClC,qBAAxC,mBAAOmC,EAAP,KAAqBC,EAArB,KAOA,OALAC,qBAAU,WDAL,IAAqBX,KCCZD,EDAPE,EAAQ,UAAD,OAAWD,KCCpBI,MAAK,SAAAQ,GAAI,OAAIF,EAAgBE,QAC/B,CAACb,IAGF,sBAAKZ,UAAU,cAAf,UACE,oBAAIA,UAAU,qBAAd,SACE,kDAEGY,OAIL,oBAAIZ,UAAU,oBAAd,gBAAmCsB,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAcI,OACjD,mBAAG1B,UAAU,qBAAb,gBAAmCsB,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAcK,QACjD,mBAAG3B,UAAU,qBAAb,gBAAmCsB,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAcM,QACjD,wBACE5B,UAAU,SACVC,KAAK,SACLU,QAASU,EAHX,uBCYSQ,EAlCO,WACpB,MAA0B1C,mBAAiB,IAA3C,mBAAOF,EAAP,KAAc6C,EAAd,KACA,EAA4C3C,mBAAS,GAArD,mBAAO4C,EAAP,KAAuBC,EAAvB,KASA,OALAR,qBAAU,WFJHV,EAAQ,UEMVG,MAAK,SAAAQ,GAAI,OAAIK,EAASL,SAIzB,sBAAKzB,UAAU,MAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CACEf,MAAOA,EACPC,MAAO8C,MAIX,qBAAKhC,UAAU,eAAf,SACE,qBAAKA,UAAU,yBAAf,SACG+B,EACC,cAAC,EAAD,CACEnB,OAAQmB,EACRV,QArBe,kBAAMW,EAAkB,MAuBvC,2BChCdC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.37a51817.chunk.js","sourcesContent":["import React, { useMemo, useState } from 'react';\nimport './TodoList.scss';\nimport { Todo } from '../../types';\n\ntype Props = {\n  todos: Todo[];\n  setId: (number: number) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({ todos, setId }) => {\n  const [query, setQuery] = useState('');\n  const [selectedOption, setSelectedOption] = useState('');\n\n  const filteredTodos = useMemo(() => (\n    todos.filter(todo => {\n      return todo.title.toLowerCase().includes(query.toLowerCase());\n    })\n      .filter(todo => {\n        switch (selectedOption) {\n          case 'All':\n            return todo;\n          case 'Active':\n            return !todo.completed;\n          case 'Completed':\n            return todo.completed;\n          default:\n            return todo;\n        }\n      })\n  ), [query, todos, selectedOption]);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <input\n        type=\"text\"\n        value={query}\n        onChange={(event) => setQuery(event.target.value)}\n      />\n      <select\n        defaultValue={selectedOption}\n        onChange={(event) => setSelectedOption(event.target.value)}\n      >\n        <option selected value=\"All\">All</option>\n        <option value=\"Active\">\n          Active\n        </option>\n        <option value=\"Completed\">Completed</option>\n      </select>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {filteredTodos.map(todo => (\n            <li\n              key={todo.id}\n              className={\n                `TodoList__item\n              ${todo.completed\n              ? 'TodoList__item--checked'\n              : 'TodoList__item--unchecked'}`\n              }\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={todo.completed}\n                  readOnly\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className=\"\n                  TodoList__user-button\n                  TodoList__user-button--selected\n                  button\n                \"\n                type=\"button\"\n                onClick={() => {\n                  setId(todo.userId);\n                }}\n              >\n                User&nbsp;\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import { User, Todo } from './types';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction getData(url: string) {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => response.json());\n}\n\nexport function getTodos(): Promise<Todo[]> {\n  return getData('/todos');\n}\n\nexport function getUserById(id: number): Promise<User> {\n  return getData(`/users/${id}`);\n}\n","import React, { useEffect, useState } from 'react';\nimport { getUserById } from '../../api';\nimport { User } from '../../types';\nimport './CurrentUser.scss';\n\ninterface Props {\n  userId: number;\n  onClear: () => void;\n}\n\nexport const CurrentUser: React.FC<Props> = ({ userId, onClear }) => {\n  const [selectedUser, setSelectedUser] = useState<User>();\n\n  useEffect(() => {\n    getUserById(userId)\n      .then(data => setSelectedUser(data));\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>\n          Selected user:\n          {userId}\n        </span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">{selectedUser?.name}</h3>\n      <p className=\"CurrentUser__email\">{selectedUser?.email}</p>\n      <p className=\"CurrentUser__phone\">{selectedUser?.phone}</p>\n      <button\n        className=\"button\"\n        type=\"button\"\n        onClick={onClear}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { Todo } from './types';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n\n  const removeSelectedUser = () => setSelectedUserId(0);\n\n  useEffect(() => {\n    getTodos()\n      .then(data => setTodos(data));\n  });\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          setId={setSelectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              onClear={removeSelectedUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}